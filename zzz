src/app/routes/main.py

from flask import Blueprint, render_template, redirect, url_for, request, flash
from flask_login import login_required, current_user
from ..models import User, Portfolio, InvestmentProfile
from .. import db
from datetime import datetime
from ..forms.profile_forms import InvestmentSurveyForm, UpdateProfileForm

# ... rest of the file remains the same

main = Blueprint('main', __name__)

@main.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    return render_template('index.html')

@main.route('/dashboard')
@login_required
def dashboard():
    # Implement dashboard logic here
    return render_template('dashboard.html')

@main.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    form = UpdateProfileForm(obj=current_user)
    investment_profile = InvestmentProfile.query.filter_by(user_id=current_user.id).first()
    if form.validate_on_submit():
        form.populate_obj(current_user)
        db.session.commit()
        flash('Profile updated successfully!', 'success')
        return redirect(url_for('main.profile'))
    return render_template('profile.html', form=form, user=current_user, investment_profile=investment_profile)


@main.route('/investment-survey', methods=['GET', 'POST'])
@login_required
def investment_survey():
    form = InvestmentSurveyForm()
    profile = InvestmentProfile.query.filter_by(user_id=current_user.id).first()
    
    if form.validate_on_submit():
        if not profile:
            profile = InvestmentProfile(user_id=current_user.id)
        
        form.populate_obj(profile)
        
        # Handle multi-select fields
        profile.preferred_industries = ','.join(form.preferred_industries.data)
        profile.secondary_investment_goals = ','.join(form.secondary_investment_goals.data)
        
        # Handle boolean fields
        profile.sustainable_investing = form.sustainable_investing.data == 'yes'
        profile.has_existing_portfolio = form.has_existing_portfolio.data == 'yes'
        profile.open_to_higher_risk = form.open_to_higher_risk.data == 'yes'
        profile.interested_in_growth_stocks = form.interested_in_growth_stocks.data == 'yes'
        
        db.session.add(profile)
        db.session.commit()
        flash('Your investment profile has been updated.', 'success')
        return redirect(url_for('main.profile'))
    
    elif request.method == 'GET' and profile:
        form = InvestmentSurveyForm(obj=profile)
        
        # Handle multi-select fields
        form.preferred_industries.data = profile.preferred_industries.split(',') if profile.preferred_industries else []
        form.secondary_investment_goals.data = profile.secondary_investment_goals.split(',') if profile.secondary_investment_goals else []
        
        # Handle boolean fields
        form.sustainable_investing.data = 'yes' if profile.sustainable_investing else 'no'
        form.has_existing_portfolio.data = 'yes' if profile.has_existing_portfolio else 'no'
        form.open_to_higher_risk.data = 'yes' if profile.open_to_higher_risk else 'no'
        form.interested_in_growth_stocks.data = 'yes' if profile.interested_in_growth_stocks else 'no'
    
    return render_template('investment_survey.html', form=form)

src/app/forms/profile_forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, FloatField, SelectField, SelectMultipleField, SubmitField, HiddenField, RadioField
from wtforms.validators import DataRequired, Email, NumberRange, Length


class InvestmentSurveyForm(FlaskForm):
    # Personal Information
    age = IntegerField('Age', validators=[DataRequired(), NumberRange(min=18, max=120)])
    country = SelectField('Country', 
                          choices = [
    ('US', 'United States'),
    ('UK', 'United Kingdom'),
    ('DE', 'Germany'),
    ('FR', 'France'),
    ('AL', 'Albania'),
    ('AD', 'Andorra'),
    ('AM', 'Armenia'),
    ('AT', 'Austria'),
    ('AZ', 'Azerbaijan'),
    ('BY', 'Belarus'),
    ('BE', 'Belgium'),
    ('BA', 'Bosnia and Herzegovina'),
    ('BG', 'Bulgaria'),
    ('HR', 'Croatia'),
    ('CY', 'Cyprus'),
    ('CZ', 'Czech Republic'),
    ('DK', 'Denmark'),
    ('EE', 'Estonia'),
    ('FI', 'Finland'),
    ('GE', 'Georgia'),
    ('GR', 'Greece'),
    ('HU', 'Hungary'),
    ('IS', 'Iceland'),
    ('IE', 'Ireland'),
    ('IT', 'Italy'),
    ('KZ', 'Kazakhstan'),
    ('XK', 'Kosovo'),
    ('LV', 'Latvia'),
    ('LI', 'Liechtenstein'),
    ('LT', 'Lithuania'),
    ('LU', 'Luxembourg'),
    ('MT', 'Malta'),
    ('MD', 'Moldova'),
    ('MC', 'Monaco'),
    ('ME', 'Montenegro'),
    ('NL', 'Netherlands'),
    ('MK', 'North Macedonia'),
    ('NO', 'Norway'),
    ('PL', 'Poland'),
    ('PT', 'Portugal'),
    ('RO', 'Romania'),
    ('RU', 'Russia'),
    ('SM', 'San Marino'),
    ('RS', 'Serbia'),
    ('SK', 'Slovakia'),
    ('SI', 'Slovenia'),
    ('ES', 'Spain'),
    ('SE', 'Sweden'),
    ('CH', 'Switzerland'),
    ('TR', 'Turkey'),
    ('UA', 'Ukraine'),
    ('VA', 'Vatican City')
])
    education_level = SelectField('Education Level', choices=[
        ('high_school', 'High School'),
        ('bachelor', 'Bachelor\'s Degree'),
        ('master', 'Master\'s Degree'),
        ('phd', 'PhD')
    ])

    # Financial Information
    annual_income = FloatField('Annual Income (€)', validators=[DataRequired(), NumberRange(min=0)])
    monthly_investment = FloatField('Monthly Investment (€)', validators=[DataRequired(), NumberRange(min=0)])
    net_worth = FloatField('Net Worth (€)', validators=[DataRequired(), NumberRange(min=0)])

    # Investment Preferences
    risk_tolerance = HiddenField('Risk Tolerance', validators=[DataRequired(), NumberRange(min=1, max=5)])
    investment_horizon = RadioField('Investment Horizon', choices=[
        ('short', 'Short-term (0-2 years)'),
        ('medium', 'Medium-term (2-5 years)'),
        ('medium-long', 'Medium-Long term (5-10 years)'),
        ('long', 'Long-term (15 or more years)')
    ])
    preferred_industries = SelectMultipleField('Preferred Industries', choices=[
        ('commodities', 'Commodities'),
        ('health', 'Health Care'),
        ('information_technology', 'Information Technology'),
        ('energy', 'Energy'),
        ('services', 'Services'),
        ('consumer_goods', 'Consumer Goods'),
        ('financials', 'Financials'),
        ('industrials', 'Industrials'),
        ('real_estate', 'Real Estate')
    ])
    
    investment_experience = HiddenField('Investment Experience', validators=[DataRequired(), NumberRange(min=1, max=5)])
    years_investing = HiddenField('Years Investing', validators=[DataRequired(), NumberRange(min=1, max=4)])

    # Investment Goals
    primary_investment_goal = RadioField('Primary Investment Goal', choices=[
        ('capital_appreciation', 'Capital Appreciation'),
        ('income_generation', 'Income Generation'),
        ('capital_preservation', 'Capital Preservation'),
        ('diversification', 'Diversification')
    ])
    secondary_investment_goals = SelectMultipleField('Secondary Investment Goals', choices=[
        ('retirement', 'Retirement Planning'),
        ('education', 'Education Funding'),
        ('home', 'Buying a Home'),
        ('major_purchase', 'Major Purchases'),
        ('travel', 'Travel and Leisure'),
        ('saving', 'Overall Savings')
    ])
    sustainable_investing = RadioField('Are you interested in sustainable or socially responsible investments?', choices=[
        ('yes', 'Yes'),
        ('no', 'No')
    ])

    # Portfolio Review
    has_existing_portfolio = RadioField('Do you currently have an investment portfolio?', choices=[
        ('yes', 'Yes'),
        ('no', 'No')
    ])

    # Conditional Questions
    open_to_higher_risk = RadioField('Are you open to considering slightly higher risk options for potentially better returns?', choices=[
        ('yes', 'Yes'),
        ('no', 'No')
    ])
    interested_in_growth_stocks = RadioField('Are you interested in growth stocks or other high-risk, high-reward investments?', choices=[
        ('yes', 'Yes'),
        ('no', 'No')
    ])

    submit = SubmitField('Submit')

class UpdateProfileForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=3, max=64)])
    email = StringField('Email', validators=[DataRequired(), Email(), Length(max=120)])
    submit = SubmitField('Update Profile')


src/app/models.py

from src.app import db
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from datetime import datetime

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))
    portfolios = db.relationship('Portfolio', backref='owner', lazy='dynamic')
    investment_profile = db.relationship('InvestmentProfile', backref='user', uselist=False)
    transactions = db.relationship('Transaction', backref='user', lazy='dynamic')
    has_completed_survey = db.Column(db.Boolean, default=False)


    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)


class Portfolio(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), index=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    stocks = db.relationship('Stock', backref='portfolio', lazy='dynamic')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    @property
    def total_value(self):
        return sum(stock.current_value for stock in self.stocks)

    @property
    def total_gain_loss(self):
        return sum(stock.gain_loss for stock in self.stocks)

class Stock(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    portfolio_id = db.Column(db.Integer, db.ForeignKey('portfolio.id'))
    ticker = db.Column(db.String(10), index=True)
    company_name = db.Column(db.String(100))
    shares = db.Column(db.Float)
    purchase_price = db.Column(db.Float)
    current_price = db.Column(db.Float)
    purchase_date = db.Column(db.DateTime, default=datetime.utcnow)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    @property
    def current_value(self):
        return self.shares * self.current_price

    @property
    def gain_loss(self):
        return self.current_value - (self.shares * self.purchase_price)

    @property
    def gain_loss_percentage(self):
        if self.purchase_price > 0:
            return (self.current_price - self.purchase_price) / self.purchase_price * 100
        return 0

class StockMetadata(db.Model):
    ticker = db.Column(db.String(10), primary_key=True)
    company_name = db.Column(db.String(100))
    industry = db.Column(db.String(100))
    market_cap = db.Column(db.Float)
    ceo = db.Column(db.String(100))
    revenue = db.Column(db.Float)
    debt = db.Column(db.Float)
    description = db.Column(db.Text)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class InvestmentProfile(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True)
    
    # Personal Information
    age = db.Column(db.Integer)
    country = db.Column(db.String(2))
    education_level = db.Column(db.String(20))
    
    # Financial Information
    annual_income = db.Column(db.Float)
    monthly_investment = db.Column(db.Float)
    net_worth = db.Column(db.Float)
    
    # Investment Preferences
    risk_tolerance = db.Column(db.Integer)
    investment_horizon = db.Column(db.String(20))
    preferred_industries = db.Column(db.String(200))  # Store as comma-separated values
    investment_experience = db.Column(db.Integer)
    years_investing = db.Column(db.Integer)
    
    # Investment Goals
    primary_investment_goal = db.Column(db.String(50))
    secondary_investment_goals = db.Column(db.String(200))  # Store as comma-separated values
    sustainable_investing = db.Column(db.Boolean)
    
    # Portfolio Review
    has_existing_portfolio = db.Column(db.Boolean)
    open_to_higher_risk = db.Column(db.Boolean)
    interested_in_growth_stocks = db.Column(db.Boolean)
    
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __repr__(self):
        return f'<InvestmentProfile {self.user_id}>'

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    portfolio_id = db.Column(db.Integer, db.ForeignKey('portfolio.id'))
    ticker = db.Column(db.String(10), index=True)
    transaction_type = db.Column(db.String(4))  # 'buy' or 'sell'
    shares = db.Column(db.Float)
    price = db.Column(db.Float)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

    @property
    def total_value(self):
        return self.shares * self.price

src/templates/investment_survey.html
{% extends "base.html" %}

{% block content %}
<div class="investment-survey-container">
    <div class="investment-survey-card">
        <h1 class="investment-survey-title">Investment Profile</h1>
        <p class="investment-survey-description">Help us understand your investment goals and preferences.</p>
        
        <form method="POST" id="investment-survey-form">
            {{ form.hidden_tag() }}
            
            <!-- 1. Personal Information -->
            <div class="investment-survey-section">
                <h2 class="investment-survey-section-title">1. Personal Information</h2>
                <div class="investment-survey-form-group">
                    {{ form.age.label(class="investment-survey-form-label") }}
                    {{ form.age(class="investment-survey-form-input") }}
                </div>
                <div class="investment-survey-form-group">
                    {{ form.country.label(class="investment-survey-form-label") }}
                    {{ form.country(class="investment-survey-form-select") }}
                </div>
                <div class="investment-survey-form-group">
                    {{ form.education_level.label(class="investment-survey-form-label") }}
                    {{ form.education_level(class="investment-survey-form-select") }}
                </div>
            </div>

            <!-- 2. Financial Information -->
            <div class="investment-survey-section">
                <h2 class="investment-survey-section-title">2. Financial Information</h2>
                <div class="investment-survey-form-group">
                    {{ form.annual_income.label(class="investment-survey-form-label") }}
                    {{ form.annual_income(class="investment-survey-form-input") }}
                </div>
                <div class="investment-survey-form-group">
                    {{ form.monthly_investment.label(class="investment-survey-form-label") }}
                    {{ form.monthly_investment(class="investment-survey-form-input") }}
                </div>
                <div class="investment-survey-form-group">
                    {{ form.net_worth.label(class="investment-survey-form-label") }}
                    {{ form.net_worth(class="investment-survey-form-input") }}
                </div>
            </div>

            <!-- 3. Investment Preferences -->
            <div class="investment-survey-section">
                <h2 class="investment-survey-section-title">3. Investment Preferences</h2>
                
                <!-- Risk Tolerance Slider -->
                <div class="investment-survey-form-group">
                    {{ form.risk_tolerance.label(class="investment-survey-form-label") }}
                    <div class="slider-container">
                        <div class="slider-labels">
                            <span>Low Risk</span>
                            <span>Moderately Low Risk</span>
                            <span>Moderate Risk</span>
                            <span>Moderately High Risk</span>
                            <span>High Risk</span>
                        </div>
                        <input type="range" id="risk_tolerance_slider" min="1" max="5" step="1" value="3">
                        {{ form.risk_tolerance(id="risk_tolerance_hidden") }}
                    </div>
                </div>

                <!-- Investment Horizon -->
                <div class="investment-survey-form-group">
                    {{ form.investment_horizon.label(class="investment-survey-form-label") }}
                    <div class="box-select">
                        {% for value, label in form.investment_horizon.choices %}
                            <div class="box-select-item">
                                <input type="radio" name="investment_horizon" id="horizon-{{ value }}" value="{{ value }}">
                                <label for="horizon-{{ value }}">{{ label }}</label>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Preferred Industries -->
                <div class="investment-survey-form-group">
                    {{ form.preferred_industries.label(class="investment-survey-form-label") }}
                    <div class="box-select multiple">
                        {% for value, label in form.preferred_industries.choices %}
                            <div class="box-select-item">
                                <input type="checkbox" name="preferred_industries" id="industry-{{ value }}" value="{{ value }}">
                                <label for="industry-{{ value }}">{{ label }}</label>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Investment Experience Slider -->
                <div class="investment-survey-form-group">
                    {{ form.investment_experience.label(class="investment-survey-form-label") }}
                    <div class="slider-container">
                        <div class="slider-labels">
                            <span>Beginner</span>
                            <span>Intermediate -</span>
                            <span>Intermediate</span>
                            <span>Intermediate +</span>
                            <span>Advanced</span>
                        </div>
                        <input type="range" id="investment_experience_slider" min="1" max="5" step="1" value="1">
                        {{ form.investment_experience(id="investment_experience_hidden") }}
                    </div>
                </div>

                <!-- Years Investing Slider -->
                <div class="investment-survey-form-group">
                    {{ form.years_investing.label(class="investment-survey-form-label") }}
                    <div class="slider-container">
                        <div class="slider-labels">
                            <span>Less than 1 year</span>
                            <span>1-3 years</span>
                            <span>3-5 years</span>
                            <span>More than 5 years</span>
                        </div>
                        <input type="range" id="years_investing_slider" min="1" max="4" step="1" value="1">
                        {{ form.years_investing(id="years_investing_hidden") }}
                    </div>
                </div>
            </div>

            <!-- 4. Investment Goals -->
            <div class="investment-survey-section">
                <h2 class="investment-survey-section-title">4. Investment Goals</h2>
                
                <!-- Primary Investment Goal -->
                <div class="investment-survey-form-group">
                    {{ form.primary_investment_goal.label(class="investment-survey-form-label") }}
                    <div class="box-select">
                        {% for value, label in form.primary_investment_goal.choices %}
                            <div class="box-select-item">
                                <input type="radio" name="primary_investment_goal" id="goal-{{ value }}" value="{{ value }}">
                                <label for="goal-{{ value }}">{{ label }}</label>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Secondary Investment Goals -->
                <div class="investment-survey-form-group">
                    {{ form.secondary_investment_goals.label(class="investment-survey-form-label") }}
                    <div class="box-select multiple">
                        {% for value, label in form.secondary_investment_goals.choices %}
                            <div class="box-select-item">
                                <input type="checkbox" name="secondary_investment_goals" id="secondary-goal-{{ value }}" value="{{ value }}">
                                <label for="secondary-goal-{{ value }}">{{ label }}</label>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Sustainable Investments -->
                <div class="investment-survey-form-group">
                    {{ form.sustainable_investing.label(class="investment-survey-form-label") }}
                    <div class="box-select">
                        {% for value, label in form.sustainable_investing.choices %}
                            <div class="box-select-item">
                                <input type="radio" name="sustainable_investing" id="sustainable-{{ value }}" value="{{ value }}">
                                <label for="sustainable-{{ value }}">{{ label }}</label>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>

            <!-- 5. Portfolio Review -->
            <div class="investment-survey-section">
                <h2 class="investment-survey-section-title">5. Portfolio Review</h2>
                
                <div class="investment-survey-form-group">
                    {{ form.has_existing_portfolio.label(class="investment-survey-form-label") }}
                    <div class="box-select">
                        {% for value, label in form.has_existing_portfolio.choices %}
                            <div class="box-select-item">
                                <input type="radio" name="has_existing_portfolio" id="portfolio-{{ value }}" value="{{ value }}">
                                <label for="portfolio-{{ value }}">{{ label }}</label>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Conditional Questions -->
                <div id="conditional-questions" style="display: none;">
                    <div class="investment-survey-form-group">
                        {{ form.open_to_higher_risk.label(class="investment-survey-form-label") }}
                        <div class="box-select">
                            {% for value, label in form.open_to_higher_risk.choices %}
                                <div class="box-select-item">
                                    <input type="radio" name="open_to_higher_risk" id="higher-risk-{{ value }}" value="{{ value }}">
                                    <label for="higher-risk-{{ value }}">{{ label }}</label>
                                </div>
                            {% endfor %}
                        </div>
                    </div>

                    <div class="investment-survey-form-group">
                        {{ form.interested_in_growth_stocks.label(class="investment-survey-form-label") }}
                        <div class="box-select">
                            {% for value, label in form.interested_in_growth_stocks.choices %}
                                <div class="box-select-item">
                                    <input type="radio" name="interested_in_growth_stocks" id="growth-stocks-{{ value }}" value="{{ value }}">
                                    <label for="growth-stocks-{{ value }}">{{ label }}</label>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>

            {{ form.submit(class="investment-survey-submit-btn") }}
        </form>
    </div>
</div>

<script>
    // JavaScript for sliders and conditional questions
    const riskToleranceSlider = document.getElementById('risk_tolerance_slider');
    const riskToleranceHidden = document.getElementById('risk_tolerance_hidden');
    const experienceSlider = document.getElementById('investment_experience_slider');
    const experienceHidden = document.getElementById('investment_experience_hidden');
    const yearsInvestingSlider = document.getElementById('years_investing_slider');
    const yearsInvestingHidden = document.getElementById('years_investing_hidden');

    function updateHiddenField(slider, hidden) {
        hidden.value = slider.value;
    }

    riskToleranceSlider.addEventListener('input', () => updateHiddenField(riskToleranceSlider, riskToleranceHidden));
    experienceSlider.addEventListener('input', () => updateHiddenField(experienceSlider, experienceHidden));
    yearsInvestingSlider.addEventListener('input', () => updateHiddenField(yearsInvestingSlider, yearsInvestingHidden));

    // Conditional questions logic
    const riskToleranceInputs = document.querySelectorAll('input[name="risk_tolerance"]');
    const investmentHorizonInputs = document.querySelectorAll('input[name="investment_horizon"]');
    const conditionalQuestions = document.getElementById('conditional-questions');

    function checkConditionalQuestions() {
        const riskTolerance = parseInt(riskToleranceHidden.value);
        const investmentHorizon = document.querySelector('input[name="investment_horizon"]:checked')?.value;

        if ((riskTolerance <= 2) || (investmentHorizon === 'long')) {
            conditionalQuestions.style.display = 'block';
        } else {
            conditionalQuestions.style.display = 'none';
        }
    }

    riskToleranceSlider.addEventListener('input', checkConditionalQuestions);
    investmentHorizonInputs.forEach(input => input.addEventListener('change', checkConditionalQuestions));

    // Initial check
    checkConditionalQuestions();
</script>
{% endblock %}
src/templates/profile.html
{% extends "base.html" %}

{% block content %}
<h1>Profile</h1>
<h2>Account Details</h2>
<p>Username: {{ user.username }}</p>
<p>Email: {{ user.email }}</p>

<h2>Investment Profile</h2>
{% if investment_profile %}
    <p>Risk Tolerance: {{ investment_profile.risk_tolerance }}/5</p>
    <p>Investment Horizon: {{ investment_profile.investment_horizon }}</p>
    <p>Primary Investment Goal: {{ investment_profile.primary_investment_goal }}</p>
    <!-- Add more fields as needed -->
    
    <a href="{{ url_for('main.investment_survey') }}" class="btn btn-primary">Update Investment Profile</a>
{% else %}
    <p>You haven't completed the investment survey yet.</p>
    <a href="{{ url_for('main.investment_survey') }}" class="btn btn-primary">Complete Investment Survey</a>
{% endif %}
{% endblock %}

src/app/init.py
"""
Initialization file for the Stock AI Portfolio Tracking app.

This module creates and configures the Flask application, sets up the database,
and initializes various Flask extensions. It also defines the application factory function.

Variables:
    project_root: The root directory of the project.
    db: SQLAlchemy database instance.
    migrate: Flask-Migrate instance for handling database migrations.
    login_manager: LoginManager instance for handling user sessions.

Functions:
    create_app: Application factory function that creates and configures the Flask app.
"""
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate


db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()

def create_app(config_name='default'):
    app = Flask(__name__, 
                template_folder=os.path.join(os.path.dirname(__file__), '..', 'templates'),
                static_folder=os.path.join(os.path.dirname(__file__), '..', 'static'))
    
    if config_name == 'testing':
        app.config.from_object('config.TestConfig')
    else:
        app.config.from_object('config.Config')

    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    login_manager.login_view = 'auth.login'

    with app.app_context():
        from . import models
        from .routes import auth, main
        
        app.register_blueprint(auth.auth)
        app.register_blueprint(main.main)

        # Create tables
        db.create_all()

    @login_manager.user_loader
    def load_user(user_id):
        return models.User.query.get(int(user_id))

    return app